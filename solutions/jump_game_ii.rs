///
/// Link: https://leetcode.com/problems/jump-game-ii
///

// ============================================================================

use std::cmp;

// ============================================================================

struct Solution {}

impl Solution {
    pub fn jump(nums: Vec<i32>) -> i32 {
        let mut dp: Vec<i32> = vec![std::i32::MAX; nums.len()];
        dp[0] = 0;

        for i in 0..dp.len() {
            for j in 0..i {
                if j + nums[j] as usize >= i {
                    dp[i] = cmp::min(dp[i], dp[j] + 1);
                }
            }
        }
        dp[dp.len() - 1]
    }
}

// ============================================================================

fn main() {
    
}

// ============================================================================

#[test]
fn test_1() {
    assert_eq!(Solution::jump(vec![2, 3, 1, 1, 4]), 2);
}

// ============================================================================

#[test]
fn test_2() {
    assert_eq!(Solution::jump(vec![2, 3, 0, 1, 4]), 2);
}

// ============================================================================
